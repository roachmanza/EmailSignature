{
	"swagger": "2.0",
	"info": {
		"description": "This is a email enhancement system , that adds signatures at the bottom of emails or any other electronic correspondence.",
		"version": "1.0.0",
		"title": "Mail enhancement API documentation"
	},
	"host": "localhost:4010",
	"basePath": "/MailEnhancement/api/v1/",
	"tags": [
		{"name": "ContactTypes",
			"description": "Contact types with email address linked to contact type. Email must be unique",
			"externalDocs": {
				"description": "Base",
				"url": "http://devtest.mmiholdings.co.za:4010/"
			}
		},
		{"name": "FieldTypes",
			"description": "Create a new field type for example operating hours, text, email , contact number, etc.",
			"externalDocs": {
				"description": "Base",
				"url": "http://devtest.mmiholdings.co.za:4010/"
			}
		},
		{"name": "Languages",
			"description": "Available languages. The language can be used in combination with the email to get signature items of that contact type and language combination.",
			"externalDocs": {
				"description": "Base",
				"url": "http://devtest.mmiholdings.co.za:4010/"
			}
		},		
		{"name": "FieldItems",
			"description": "Re-usable items to build up a signature. The item language will be used as a parameter, so you can have multiple items of the same field type, with different languages.",
			"externalDocs": {
				"description": "Base",
				"url": "http://devtest.mmiholdings.co.za:4010/"
			}
		},
		{"name": "SignatureItems",
			"description": "Signature items is a combination of a contact type and a field item, to create a signature item, a signature consists of multiple signature items. Various methods are available to get return lists as needed.",
			"externalDocs": {
				"description": "Base",
				"url": "http://devtest.mmiholdings.co.za:4010/"
			}
		}
		
	],
	"schemes": [
		"http"
	],
	"paths": {
		"/ContactTypes": {
		
			"post": {
				"tags": [
					"ContactTypes"
				],
				"description": "Create a new contact type on the database.",
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Contact types that needs to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ContactTypesModel"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Created"
					},
					"400": {
						"description": "Bad Request"
					},
					"403": {
						"description": "Forbidden"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			},
			
			"get": {
				"tags": [
					"ContactTypes"
				],
				"description": "Get all the contact types from the database.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			}


		},
		"/ContactTypes/EmailAddress/{EmailAddress}": {
			"get": {
				"tags": [
					"ContactTypes"
				],
				"description": "Get all the contact type records from the database that has the supplied email address.",
				"parameters": [
					{
					"name": "EmailAddress",
					"in": "path",
					"description": "EmailAddress of a contact type that needs to be fetched",
					"required": true,
					"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			}
		},
		"/ContactTypes/{Id}": {
			"get": {
				"tags": [
					"ContactTypes"
				],
				"description": "Get the contact type record from the database by the database id.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Database id of contact type that needs to be fetched",
					"required": true,
					"type": "integer",
					"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			},
			"put":{
				"tags": [
					"ContactTypes"
				],
				"description": "Update a contact type record on the database with the details supplied , and the id of the record on the database.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of contact type that needs to be edited",
					"required": true,
					"type": "integer",
					"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Id of the contact type that needs to be edited",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ContactTypesModel"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			},
			"delete": {
				"tags": [
					"ContactTypes"
				],
				"description": "Delete a  contact type record from the database.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of contact type that needs to be removed",
					"required": true,
					"type": "integer",
					"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			}
		},
				
		"/FieldTypes": {
		
			"post": {
				"tags": [
					"FieldTypes"
				],
				"description": "Create a new field type for example operating hours, text, email , contact number, etc.",
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "field type that needs to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/FieldTypesModel"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Created"
					},
					"400": {
						"description": "Bad Request"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			},

			"get": {
				"tags": [
					"FieldTypes"
				],
				"description": "Get all the field types from the database.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			}

		},
		"/FieldTypes/{Id}": {
			"get": {
				"tags": [
					"FieldTypes"
				],
				"description": "Get the field type from the database by the id.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of field type that needs to be fetched",
					"required": true,
					"type": "integer",
					"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			},
			"put":{
				"tags": [
					"FieldTypes"
				],
				"description": "Update a field type record on the database.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of field type that needs to be edited",
					"required": true,
					"type": "integer",
					"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"description": "field type that needs to be edited",
						"required": true,
						"schema": {
							"$ref": "#/definitions/FieldTypesModel"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			},
			"delete": {
				"tags": [
					"FieldTypes"
				],
				"description": "Delete a field type record from the database.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of field type that needs to be removed",
					"required": true,
					"type": "integer",
					"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			}
		},
		
		"/Languages": {
		
			"post": {
				"tags": [
					"Languages"
				],
				"description": "Create a new language on the database.",
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "language that needs to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LanguagesModel"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Created"
					},
					"400": {
						"description": "Bad Request"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			},
			
			"get": {
				"tags": [
					"Languages"
				],
				"description": "Get all the languages from the database.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			}


		},
		"/Languages/{Id}": {
			"get": {
				"tags": [
					"Languages"
				],
				"description": "Get the language from the database by the id.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of language that needs to be fetched",
					"required": true,
					"type": "integer",
					"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			},
			"put":{
				"tags": [
					"Languages"
				],
				"description": "Update a language record on the database.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of language that needs to be edited",
					"required": true,
					"type": "integer",
					"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"description": "language that needs to be edited",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LanguagesModel"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"503": {
						"description": "Service Unavailable"
					}
				
				}
			},
			"delete": {
				"tags": [
					"Languages"
				],
				"description": "Delete a language record from the database.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of language that needs to be removed",
					"required": true,
					"type": "integer",
					"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"503": {
						"description": "Service Unavailable"
					}
				
				}
			}
		},
		
		
		"/FieldItems": {
		
			"post": {
				"tags": [
					"FieldItems"
				],
				"description": "Create a new  field item  on the database.",
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": " field item  that needs to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/FieldItemsModel"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Created"
					},
					"400": {
						"description": "Bad Request"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			},
			
			"get": {
				"tags": [
					"FieldItems"
				],
				"description": "Get all the  field item  from the database.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			}


		},
		"/FieldItems/{Id}": {
			"get": {
				"tags": [
					"FieldItems"
				],
				"description": "Get the  field item  from the database by the id.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of  field item  that needs to be fetched",
					"required": true,
					"type": "integer",
					"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			},
			
			"put":{
				"tags": [
					"FieldItems"
				],
				"description": "Update a  field item  record on the database.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of  field item  that needs to be edited",
					"required": true,
					"type": "integer",
					"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"description": " field item  that needs to be edited",
						"required": true,
						"schema": {
							"$ref": "#/definitions/FieldItemsModel"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"503": {
						"description": "Service Unavailable"
					}
				
				}
			},
			
			"delete": {
				"tags": [
					"FieldItems"
				],
				"description": "Delete a field item record from the database.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of  field item  that needs to be removed",
					"required": true,
					"type": "integer",
					"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"503": {
						"description": "Service Unavailable"
					}
				
				}
			}
		},
		
				
		"/SignatureItems": {
	
			"post": {
				"tags": [
					"SignatureItems"
				],
				"description": "Create a new signature item on the database.",
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "signature item that needs to be added to the system",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SignatureItemsModel"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Created"
					},
					"400": {
						"description": "Bad Request"
					},
					"403": {
						"description": "Forbidden"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			},
		
			"get": {
				"tags": [
					"SignatureItems"
				],
				"description": "Get all the signature items from the database. This is the base values , as they are mapped from contact type to field item. The contact name and field item name is returned.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			}

		},

		"/SignatureItems/ContactTypes/{Id}": {
			
			"get": {
				"tags": [
					"SignatureItems"
				],
				"description": "Get the full signature item back for the contact type id supplied, with all the extra data for use in front end applications for styling etc.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of signature item's contact types that needs to be fetched",
					"required": true,
					"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					}
				}
			}
			
		},
		
		"/SignatureItems/EmailAddress/{EmailAddress}": {
		
			"get": {
				"tags": [
					"SignatureItems"
				],
				"description": "Get the full signature item back for the email address supplied, with all the extra data for use in front end applications for styling etc. Brings back all the data, in all languages.",
				"parameters": [
					{
					"name": "EmailAddress",
					"in": "path",
					"description": "EmailAddress of signature items that needs to be fetched",
					"required": true,
					"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			}
		
		},	
		
		"/SignatureItems/EmailAddress/{EmailAddress}/LanguageCode/{LanguageCode}": {
		
			"get": {
				"tags": [
					"SignatureItems"
				],
				"description": "Get the full signature item back for the email address and language supplied, with all the extra data for use in front end applications for styling etc.",
				"parameters": [
					{
					"name": "EmailAddress",
					"in": "path",
					"description": "EmailAddress of signature items that needs to be fetched",
					"required": true,
					"type": "string"
					},
					{
					"name": "LanguageCode",
					"in": "path",
					"description": "LanguageCode of signature items that needs to be fetched",
					"required": true,
					"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			}
		
		},
		
		
		"/SignatureItems/{Id}": {
			
			"get": {
				"tags": [
					"SignatureItems"
				],
				"description": "Get the language from the database by the id.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of language that needs to be fetched",
					"required": true,
					"type": "integer",
					"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					},
					"404": {
						"description": "Not Found"
					},
					"503": {
						"description": "Service Unavailable"
					}
				}
			},
			
			"put":{
				"tags": [
					"SignatureItems"
				],
				"description": "Update a language record on the database.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of language that needs to be edited",
					"required": true,
					"type": "integer",
					"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"description": "language that needs to be edited",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SignatureItemsModel"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					}
				}
			},
			
			"delete": {
				"tags": [
					"SignatureItems"
				],
				"description": "Delete a language record from the database.",
				"parameters": [
					{
					"name": "Id",
					"in": "path",
					"description": "Id of language that needs to be removed",
					"required": true,
					"type": "integer",
					"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request"
					}
				}
			}
			
		}
		
		
	
	
	
	
	},
	"definitions": {
	
		"ContactTypesModel": {
			"type": "object",
			"required": [
				"name",
				"description",
				"email"
			],
			"properties": {
				"name": {
					"type": "string",
					"example": "name"
				},
				"description": {
					"type": "string",
					"example": "description"
				},
				"email": {
					"type": "string",
					"example": "emailAddress"
				},
				"inactive": {
					"type": "string",
					"example": "0"
				}
				
			}
		},
		
		"FieldTypesModel": {
			"type": "object",
			"required": [
				"name",
				"description"
			],
			"properties": {
				"name": {
					"type": "string",
					"example": "name"
				},
				"description": {
					"type": "string",
					"example": "description"
				},
				"inactive": {
					"type": "string",
					"example": "0"
				}
			}
		},
		
		"LanguagesModel": {
			"type": "object",
			"required": [
				"name",
				"description",
				"code"
			],
			"properties": {
				"name": {
					"type": "string",
					"example": "name"
				},
				"description": {
					"type": "string",
					"example": "description"
				},
				"code": {
					"type": "string",
					"example": "code"
				},
				"inactive": {
					"type": "string",
					"example": "0"
				}
			}
		},	
		
		"FieldItemsModel": {
			"type": "object",
			"required": [
				"languageid",
				"fieldtypeid",
				"name",
				"description",
				"label",
				"value",
				"printformat"
			],
			"properties": {
				"languageid": {
					"type": "integer",
					"format": "int32",
					"example": 1
				},
				"fieldtypeid": {
					"type": "integer",
					"format": "int32",
					"example": 1
				},
				"name": {
					"type": "string",
					"example": "name"
				},
				"description": {
					"type": "string",
					"example": "description"
				},
				"label": {
					"type": "string",
					"example": "label"
				},
				"value": {
					"type": "string",
					"example": "value"
				},
				"printformat": {
					"type": "string",
					"example": "printformat"
				},
				"inactive": {
					"type": "string",
					"example": "0"
				}
			}
		},	
		
		"SignatureItemsModel": {
			"type": "object",
			"required": [
				"contacttypeid",
				"fielditemid",
				"sequence"
			],
			"properties": {
				"contacttypeid": {
					"type": "integer",
					"format": "int32",
					"example": 1
				},
				"fielditemid": {
					"type": "integer",
					"format": "int32",
					"example": 1
				},
				"sequence": {
					"type": "integer",
					"format": "int32",
					"example": 1
				}
			}
		}
	
	}
}